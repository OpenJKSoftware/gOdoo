[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch]
installer = "uv"

[tool.hatch.version]
path = "src/godoo_cli/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/godoo_cli"]

[project]
name = "gOdoo-cli"
dynamic = ["version"]
description = "Wrapper around Odoo-Bin with some convinience RPC functions."
authors = [{name="Joshua Kreuder", email="Joshua_Kreuder@outlook.com"}]
license = {text = "LGPL-3.0-only"}
readme = "README.md"
keywords = ["odoo", "godoo","devcontainer"]
requires-python = ">=3.9"
urls=  {repository = "https://github.com/OpenJKSoftware/gOdoo"}
scripts = {godoo = "godoo_cli:launch_cli"}
dependencies = [
    "python-dotenv>=0.20.0",
    "ruamel-yaml>=0.17.21",
    "gitpython>=3.1.27",
    "godoo-rpc>=0.1.4",
    "openupgradelib>=3.3.4",
    "psycopg2-binary>=2.9.10",
    "passlib>=1.7.3", # Mirror Odoo Reqs
    "typer-common-functions>=0.0.12",
    "typer>=0.9.0",
]

[project.optional-dependencies]
devcontainer = [
    "ipdb>=0.13.9",
    "debugpy>=1.6.0",
    "watchdog>=2.1.7",
    "rope>=0.23.0",
    "py-spy>=0.3.11",
    "inotify>=0.2.10",
    "mock>=4.0.3",
    "pydevd-odoo>=1.2.1"
]
# Dependencies for development and code quality; removed flake8-formatter-junit-xml as it is not required for GitHub Actions
codequality = [
    "pylint-odoo>=8.0.16",
    "black>=22.10.0",
    "isort>=5.10.1",
    "flake8>=5.0.4",
    "pytest>=7.2.1",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.4.0",
]

[tool.pyright]
exclude = [
    "**/remote_instance_data",
    "./thirdparty"
]


[tool.black]
line-length = 120

[tool.isort]
profile="black"
multi_line_output=3
include_trailing_comma=true
force_grid_wrap=0
combine_as_imports=true
use_parentheses=true
line_length=120
known_odoo="odoo"
known_odoo_addons="odoo.addons"
sections="FUTURE,STDLIB,THIRDPARTY,ODOO,ODOO_ADDONS,FIRSTPARTY,LOCALFOLDER"
default_section="THIRDPARTY"
ensure_newline_before_comments=true

[tool.pylint.format]
max-line-length=120

[tool.pylint.master]
init-hook='import sys; sys.path.append("/odoo/odoo")'
load-plugins="pylint_odoo"
score="n"

[tool.pylint.odoolint]
readme-template-url="https://github.com/OCA/maintainer-tools/blob/master/template/module/README.rst"
manifest-required-authors="Joshua Kreuder"
manifest-required-keys="license"
manifest-deprecated-keys="active"
license-allowed="AGPL-3,GPL-2,GPL-2 or any later version,GPL-3,GPL-3 or any later version,LGPL-3,Other proprietary"
valid-odoo-versions="16.0"

[tool.pylint.'MESSAGES CONTROL']
disable="all"

enable=[
    "anomalous-backslash-in-string",
    "assignment-from-none",
    "attribute-deprecated",
    "dangerous-default-value",
    "development-status-allowed",
    "duplicate-key",
    "eval-used",
    "license-allowed",
    "manifest-author-string",
    "manifest-deprecated-key",
    "manifest-required-author",
    "manifest-required-key",
    "manifest-version-format",
    "method-compute",
    "method-inverse",
    "method-required-super",
    "method-search",
    "pointless-statement",
    "pointless-string-statement",
    "print-used",
    "redundant-keyword-arg",
    "reimported",
    "return-in-init",
    "sql-injection",
    "too-few-format-args",
    "translation-field",
    "translation-required",
    "unreachable",
    "use-vim-comment",
    "consider-merging-classes-inherited",
    "deprecated-module",
    "invalid-commit",
    "odoo-addons-relative-import",
    "redefined-builtin",
    "unidiomatic-typecheck",
    "missing-return",
    "no-else-raise",
    "useless-return"
]


[tool.pylint.reports]
msg-template="::error file=%(path)s,line=%(line)d,col=%(column)d::%(msg_id)s(%(symbol)s): %(msg)s"
output-format="text"
reports="no"

# ==== Linting Configuration (GitHub Actions Compatible) ====
[tool.hatch.envs.lint]
dependencies = [
  "pylint-odoo>=8.0.16",
  "flake8>=5.0.4",
  "black>=22.10.0",
  "isort>=5.10.1",
]

[tool.hatch.envs.lint.scripts]
style = [
  "black {args:src addons}",
  "isort {args:src addons}",
]
check = [
  "black --check {args:src addons}",
  "isort --check {args:src addons}",
  "flake8 {args:src addons}",
  "python -m pylint {args:src addons}",
]
format = [
  "black {args:src addons}",
  "isort {args:src addons}",
]
# === GitHub Actions CI Lint Output Format ===
ci = [
  "flake8 {args:src addons} --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s: %(text)s'",
  "python -m pylint {args:src addons} --msg-template='::error file=%(path)s,line=%(line)d,col=%(column)d::%(msg_id)s(%(symbol)s): %(msg)s'",
]

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.2.1",
  "pytest-cov>=4.0.0",
  "mock>=4.0.3",
]
[tool.hatch.envs.test.scripts]
run = "pytest {args:src}"
cov = "pytest --cov=src --cov-report=xml {args:src}"
ci = "pytest --verbose --exitfirst --failed-first --junitxml=junit/pytest-results.xml --cov=src --cov-report=xml {args:src}"
