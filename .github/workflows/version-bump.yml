name: Version bump

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      versionPart:
        description: "Version bump part"
        required: true
        default: patch
        type: choice
        options:
          - prepatch
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    name: Version bump and PR creation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Install Hatch
        uses: pypa/hatch@install

      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release

      - name: Get Current Version and Bump
        id: version
        run: |
          CURRENT_VERSION=$(hatch version)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          hatch version ${{ github.event.inputs.versionPart }}
          NEW_VERSION=$(hatch version)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Branch and Commit
        run: |
          git add src/godoo_cli/__about__.py
          git commit -m "ðŸ”– Bump version ${{ steps.version.outputs.CURRENT_VERSION }} â†’ ${{ steps.version.outputs.NEW_VERSION }}"
          git push origin release --force

      - name: Create Pull Request
        uses: actions/github-script@v7
        id: create-pr
        with:
          script: |
            const { repo, owner } = context.repo;

            // Get commit history since last release
            const { data: tags } = await github.rest.repos.listTags({
              owner,
              repo,
              per_page: 1
            });

            const lastTag = tags[0]?.commit.sha || 'HEAD~100';
            const { data: commits } = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: lastTag,
              head: 'HEAD'
            });

            // Format commit history for release notes
            const changes = commits.commits
              .filter(commit => !commit.commit.message.startsWith('ðŸ”–'))
              .map(commit => {
                const firstLine = commit.commit.message.split('\n')[0];
                return `- ${firstLine} ([${commit.sha.substring(0, 7)}](${commit.html_url}))`;
              })
              .join('\n');

            const releaseNotes = [
              `# ðŸ”– Release v${{ steps.version.outputs.NEW_VERSION }}`,
              '',
              '## What\'s Changed',
              '',
              changes || '_No changes since last release_',
              '',
              '## Version',
              `${{ steps.version.outputs.CURRENT_VERSION }} â†’ ${{ steps.version.outputs.NEW_VERSION }}`
            ].join('\n');

            const result = await github.rest.pulls.create({
              title: 'ðŸ”– Release v${{ steps.version.outputs.NEW_VERSION }}',
              owner,
              repo,
              head: 'release',
              base: 'main',
              body: releaseNotes
            });

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['release', 'automated pr', 'auto-release']
            });
