default:
  image: registry.gitlab.com:3.8
  tags:
    - "amd64"
    - "docker"

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  MAIN_IMAGE_TAG: $CI_REGISTRY_IMAGE:CI_DEFAULT_BRANCH
  IMAGE_TAG_TESTING: $IMAGE_TAG-testing
  POSTGRES_DB: postgres
  POSTGRES_USER: odoo_user
  POSTGRES_PASSWORD: odoo
  POSTGRES_HOST_AUTH_METHOD: trust
  ODOO_DB_HOST: postgres
  ODOO_TEST_SKIP_MODULES: ""
  DOCKER_DRIVER: overlay2
  PY_PACKAGE_PATH: open_wodoo
  BUMP_VERSION:
    value: ""
    description: Specifies how to Bump the Package version. https://python-poetry.org/docs/cli/#version
  TAG_NOTE:
    value: ""
    description: Note that will be added to the Release Tag when using BUMP_VERSION

stages:
  - lint
  - build
  - test
  - push

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      variables:
        TEST_TARGET: changes:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        UPGRADE_FLAG_BRANCH: --branch $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        TEST_TARGET: all
        UPGRADE_FLAG_BRANCH: --branch $CI_DEFAULT_BRANCH

.docker_login: &docker_login
  - echo "$CI_BUILD_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

.ssh_config: &ssh_config
  - eval $(ssh-agent -s)
  # - ssh-add <(echo "$SSH_PRIVATE_KEY") # Add Private keys here

pylint:
  stage: lint
  before_script:
    - pip install pylint-odoo==8.0.16 pylint-gitlab==1.1.0
  script:
    - pylint --version
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter addons open_wodoo > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter addons open_wodoo > pylint.html
    - pylint addons open_wodoo
  artifacts:
    when: always
    paths:
      - pylint.html
    reports:
      codequality: codeclimate.json

build test image:
  stage: build
  image: docker:20.10.21
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: full
  before_script:
    - *docker_login
    - *ssh_config
    - docker pull $MAIN_IMAGE_TAG || true
  script:
    - echo "Building Image and tagging as '$IMAGE_TAG_TESTING'"
    - DOCKER_BUILDKIT=1 PROGRESS_NO_TRUNC=1 docker build --pull --ssh default --progress=plain --tag $IMAGE_TAG_TESTING
      --target test --build-arg SOURCE_CLONE_ARCHIVE=true --cache-from $MAIN_IMAGE_TAG .
    - docker push $IMAGE_TAG_TESTING

test:
  stage: test
  variables:
    GIT_STRATEGY: none
  image:
    name: $IMAGE_TAG_TESTING
    entrypoint: [""]
  rules:
    - changes:
        - odoo_repospec.yml
      variables:
        TEST_TARGET: all
    - changes:
        - "*"
  services:
    - name: postgres:15-alpine
  before_script:
    - | # Ensure that the MR Target Branch is fetched in the git repo.
      if [ ! -z $CI_MERGE_REQUEST_TARGET_BRANCH_NAME ]
      then
        cd /odoo/workspace/
        git remote set-url origin "https://gitlab-ci-token:$CI_JOB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
        git fetch origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
      fi
  script:
    - echo Testing with Target $TEST_TARGET
    - wodoo --verbose test "$TEST_TARGET"

push image:
  stage: push
  image: docker:20.10.21
  only:
    - branches
  before_script:
    - *docker_login
    - docker pull $IMAGE_TAG_TESTING
  script:
    - DOCKER_BUILDKIT=1 PROGRESS_NO_TRUNC=1 docker build --progress=plain --tag $IMAGE_TAG --target server --build-arg
      SOURCE_CLONE_ARCHIVE=true --cache-from $IMAGE_TAG_TESTING .
    - docker push $IMAGE_TAG

bump version:
  stage: build
  cache: []
  variables:
    GIT_STRATEGY: clone # Ensure we start with a clean Repo here
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $BUMP_VERSION"
  before_script:
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_CI_PUSH_TOKEN}@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
  script:
    - |
      VERSION=$(poetry version --short)
      poetry version $BUMP_VERSION
      BUMPED_VERSION=$(poetry version --short)
    - |
      git add --all
      git commit -m "[BUMP] Package $VERSION to $BUMPED_VERSION"
    - |
      TAG_MESSAGE="CI Release for $BUMPED_VERSION"
      [ ! -z "$TAG_NOTE" ] && TAG_MESSAGE=$(echo -e "$TAG_MESSAGE\n\n$TAG_NOTE")
      TAG_NAME="Version-$BUMPED_VERSION"
      echo "Creating Tag '$TAG_NAME' with Message '$TAG_MESSAGE'"
      git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
    - git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
    - git push origin -o ci.variable="CI_BUILD_AND_PUSH=true" -o ci.variable="CACHE_KEY=$CI_COMMIT_REF_SLUG" --tags

build_and_push:
  stage: build
  rules:
    - if: '$CI_BUILD_AND_PUSH=="true"'
  before_script:
    - poetry config pypi-token.pypi $PYPI_API_TOKEN
  script:
    - poetry build
    - poetry publish
  artifacts:
    paths:
      - dist/*
